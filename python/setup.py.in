#!/usr/bin/env python
# vim: set fileencoding=utf-8 :
# Andre Anjos <andre.anjos@idiap.ch>
# Thu 16 Aug 2012 11:36:19 CEST 

"""A setup file for Bob Python bindings using Boost.Python
"""

# ---------------------------------------------------------------------------#
#  variables we are going to need from Bob's cmake processor                 # 
# ---------------------------------------------------------------------------#

def cmake_true(var):
  """Tests for cmake truth"""
  return var.lower() in ('yes', '1', 'on', 'true', 'y')

def cmake_false(var):
  """Tests for cmake false"""
  return var.lower() in ('no', '0', 'off', 'false', 'n', '') or \
      var.find('-NOTFOUND') != -1

BOB_VERSION = '@BOB_VERSION@'
ENABLE_RPATH = cmake_false('@BOB_SOVERSION@')
CMAKE_BINARY_DIR = '@CMAKE_BINARY_DIR@'
QT4_FOUND = cmake_true('@QT4_FOUND@')

# ---------------------------------------------------------------------------#
#  general utilities for the setup                                           # 
# ---------------------------------------------------------------------------#

import os
import fnmatch
from setuptools.command.build_ext import build_ext as build_ext_base
from setuptools import Extension

class build_ext(build_ext_base):
  '''Customized extension to build bob.python bindings in the expected way'''

  user_options = build_ext_base.user_options + \
      [('prefix=', 'C', 'Which base directory to use for this install')]

  def __init__(self, *args, **kwargs):
    build_ext_base.__init__(self, *args, **kwargs)

  def initialize_options(self):
    '''Allows our user_options to be picked-up'''
    
    build_ext_base.initialize_options(self)

    self.prefix = os.path.join(CMAKE_BINARY_DIR)

  def build_extension(self, ext):
    '''Concretely builds the extension given as input'''

    def ld_ok(opt):
      '''Tells if a certain option is a go for the linker'''

      if opt.find('-L') == 0: return False
      return True

    # Some clean-up on the linker which is screwed up...
    self.compiler.linker_so = [k for k in self.compiler.linker_so if ld_ok(k)]

    # Fix library paths in case the '--prefix option was given'
    if self.prefix is not None:
      ext.library_dirs = [os.path.join(self.prefix, 'lib')] + ext.library_dirs

      if ENABLE_RPATH:
        # I'm installing locally, so we set the runtime path
        ext.runtime_library_dirs = ext.library_dirs
      else:
        # The user is setting BOB_SOVERSION indicating a root installation
        ext.runtime_library_dirs = []

    build_ext_base.build_extension(self, ext)

def setup_extension(name):
  """Sets up a given C++ extension"""

  package = name.split('_')[0]

  object_dir = os.path.join(CMAKE_BINARY_DIR, 'python', package, 'CMakeFiles',
      'pybob_%s.dir' % name, 'src')

  objects = [os.path.join(object_dir, k) for k in \
      fnmatch.filter(os.listdir(object_dir), '*.o')]

  ext_name = 'bob.%s._%s' % (name.replace('_', '.'), name)

  return Extension(ext_name, sources=[],
      extra_objects=objects,
      libraries=['bob_python_integration', 'bob_' + package],
      )

# ---------------------------------------------------------------------------#
#  setup starts here                                                         # 
# ---------------------------------------------------------------------------#

CONSOLE_SCRIPTS = [
  'bob_config.py = bob.script.config:main',
  'bob_dbmanage.py = bob.db.script.dbmanage:main',
  'bob_compute_perf.py = bob.measure.script.compute_perf:main',
  'bob_eval_threshold.py = bob.measure.script.eval_threshold:main',
  'bob_apply_threshold.py = bob.measure.script.apply_threshold:main',
  'bob_face_detect.py = bob.visioner.script.facebox:main',
  'bob_face_keypoints.py = bob.visioner.script.facepoints:main',
  'bob_visioner_trainer.py = bob.visioner.script.trainer:main',
  ]

# built-in databases
DATABASES = [
    'iris = bob.db.iris.driver:Interface',
    ]

EXTENSIONS = [
    'core',
    'core_random',
    'io',
    'ip',
    'machine',
    'math',
    'measure',
    'sp',
    'trainer',
    'trainer_overload',
    ]

if QT4_FOUND:
  EXTENSIONS += [
      'visioner',
      'daq',
      ]

from setuptools import setup, find_packages

setup(

    name='bob',
    version=BOB_VERSION,
    description='Bob is a free signal-processing and machine learning toolbox',
    url='http://idiap.github.com/bob',
    download_url='http://www.idiap.ch/software/bob/packages/bob-%s.tar.gz' % BOB_VERSION,
    author='Bob Developers',
    author_email='bob-devel@googlegroups.com',
    keywords=['signal processing', 'machine learning', 'biometrics'],
    license='GPLv3',
    
    classifiers=[
      'Classifier: Development Status :: 5 - Production/Stable',
      'Classifier: Environment :: Console (Text Based)',
      'Classifier: Intended Audience :: Science/Research',
      'Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
      'Classifier: Programming Language :: C++',
      'Classifier: Programming Language :: Python',
      'Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence',
      ],

    package_dir={'': 'lib'},
    packages=find_packages('lib'),

    ext_modules=[setup_extension(k) for k in EXTENSIONS],
    cmdclass = {'build_ext': build_ext},

    install_requires=[
      'argparse',
      'numpy',
      'matplotlib',
      'sqlalchemy',
      'scipy',
      ],

    entry_points={
      'console_scripts': CONSOLE_SCRIPTS,
      'bob.db': DATABASES,
      },

    )
